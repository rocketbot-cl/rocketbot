{"version":3,"sources":["angular-indexed-db.js"],"names":["__slice","slice","angular","module","provider","IDBKeyRange","allTransactions","apiDirection","appendResultsToPromise","applyNeededUpgrades","cursorDirection","db","dbMode","dbName","dbPromise","dbVersion","defaultQueryOptions","errorMessageFor","indexedDB","readyState","upgradesByVersion","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","mozIDBKeyRange","webkitIDBKeyRange","msIDBKeyRange","readonly","readwrite","pending","next","nextunique","prev","prevunique","ascending","descending","useIndex","keyRange","direction","oldVersion","event","tx","$log","version","hasOwnProperty","log","e","target","webkitErrorMessage","error","message","errorCode","promise","results","then","this","connection","databaseName","upgradeDatabase","newVersion","callback","Math","max","apply","Object","keys","$get","$q","$rootScope","DbQ","ObjectStore","Query","Transaction","addTransaction","closeDatabase","createDatabaseConnection","keyRangeForOptions","openDatabase","openTransaction","rejectWithError","validateStoreNames","deferred","$apply","reject","dbReq","defer","open","parseInt","onsuccess","result","resolve","onblocked","onerror","onupgradeneeded","transaction","name","close","storeNames","found","storeName","_i","_len","length","objectStoreNames","contains","mode","options","beginKey","endKey","bound","push","index","indexOf","splice","setupCallbacks","prototype","oncomplete","_this","onabort","objectStore","abort","q","args","arguments","call","_ref","rejectWith","req","notify","dbErrorFunction","resolveWith","store","_mapCursor","mapFunc","openCursor","cursor","_arrayOperation","data","item","isArray","when","getAllKeys","key","clear","upsert","put","insert","add","getAll","value","eachWhere","query","indexName","findWhere","each","eachBy","count","find","get","findBy","$lt","upperBound","$gt","lowerBound","$lte","$gte","$eq","only","$between","low","hi","exLow","exHi","$desc","unique","$asc","$index","openStore","callBack","openStores","objectStores","_results","openAllStores","Array","deleteDatabase","queryDirection","flush","all","databaseInfo","stores","keyPath","autoIncrement","indices","indexNames"],"mappings":"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","file":"angular-indexed-db.min.js","sourcesContent":["\n/**\n @license $indexedDBProvider\n (c) 2014 Bram Whillock (bramski)\n Forked from original work by clements Capitan (webcss)\n License: MIT\n */\n\n(function() {\n  'use strict';\n  var __slice = [].slice;\n\n  angular.module('indexedDB', []).provider('$indexedDB', function() {\n    var IDBKeyRange, allTransactions, apiDirection, appendResultsToPromise, applyNeededUpgrades, cursorDirection, db, dbMode, dbName, dbPromise, dbVersion, defaultQueryOptions, errorMessageFor, indexedDB, readyState, upgradesByVersion;\n    indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;\n    IDBKeyRange = window.IDBKeyRange || window.mozIDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;\n    dbMode = {\n      readonly: \"readonly\",\n      readwrite: \"readwrite\"\n    };\n    readyState = {\n      pending: \"pending\"\n    };\n    cursorDirection = {\n      next: \"next\",\n      nextunique: \"nextunique\",\n      prev: \"prev\",\n      prevunique: \"prevunique\"\n    };\n    apiDirection = {\n      ascending: cursorDirection.next,\n      descending: cursorDirection.prev\n    };\n    dbName = '';\n    dbVersion = 1;\n    db = null;\n    upgradesByVersion = {};\n    dbPromise = null;\n    allTransactions = [];\n    defaultQueryOptions = {\n      useIndex: void 0,\n      keyRange: null,\n      direction: cursorDirection.next\n    };\n    applyNeededUpgrades = function(oldVersion, event, db, tx, $log) {\n      var version;\n      for (version in upgradesByVersion) {\n        if (!upgradesByVersion.hasOwnProperty(version) || version <= oldVersion) {\n          continue;\n        }\n        $log.log(\"$indexedDB: Running upgrade : \" + version + \" from \" + oldVersion);\n        upgradesByVersion[version](event, db, tx);\n      }\n    };\n    errorMessageFor = function(e) {\n      if (e.target.readyState === readyState.pending) {\n        return \"Error: Operation pending\";\n      } else {\n        return e.target.webkitErrorMessage || e.target.error.message || e.target.errorCode;\n      }\n    };\n    appendResultsToPromise = function(promise, results) {\n      if (results !== void 0) {\n        return promise.then(function() {\n          return results;\n        });\n      } else {\n        return promise;\n      }\n    };\n\n    /**\n    @ngdoc function\n    @name $indexedDBProvider.connection\n    @function\n    \n    @description\n    sets the name of the database to use\n    \n    @param {string} databaseName database name.\n    @returns {object} this\n     */\n    this.connection = function(databaseName) {\n      dbName = databaseName;\n      return this;\n    };\n\n    /**\n    @ngdoc function\n    @name $indexedDBProvider.upgradeDatabase\n    @function\n    \n    @description provides version number and steps to upgrade the database wrapped in a\n    callback function\n    \n    @param {number} newVersion new version number for the database.\n    @param {function} callback the callback which proceeds the upgrade\n    @returns {object} this\n     */\n    this.upgradeDatabase = function(newVersion, callback) {\n      upgradesByVersion[newVersion] = callback;\n      dbVersion = Math.max.apply(null, Object.keys(upgradesByVersion));\n      return this;\n    };\n    this.$get = [\n      '$q', '$rootScope', '$log', function($q, $rootScope, $log) {\n        var DbQ, ObjectStore, Query, Transaction, addTransaction, closeDatabase, createDatabaseConnection, keyRangeForOptions, openDatabase, openTransaction, rejectWithError, validateStoreNames;\n        rejectWithError = function(deferred) {\n          return function(error) {\n            return $rootScope.$apply(function() {\n              return deferred.reject(errorMessageFor(error));\n            });\n          };\n        };\n        createDatabaseConnection = function() {\n          var dbReq, deferred;\n          deferred = $q.defer();\n          dbReq = indexedDB.open(dbName, parseInt(dbVersion) || 1);\n          dbReq.onsuccess = function() {\n            db = dbReq.result;\n            $rootScope.$apply(function() {\n              deferred.resolve(db);\n            });\n          };\n          dbReq.onblocked = dbReq.onerror = rejectWithError(deferred);\n          dbReq.onupgradeneeded = function(event) {\n            var tx;\n            db = event.target.result;\n            tx = event.target.transaction;\n            $log.log(\"$indexedDB: Upgrading database '\" + db.name + \"' from version \" + event.oldVersion + \" to version \" + event.newVersion + \" ...\");\n            applyNeededUpgrades(event.oldVersion, event, db, tx, $log);\n          };\n          return deferred.promise;\n        };\n        openDatabase = function() {\n          return dbPromise || (dbPromise = createDatabaseConnection());\n        };\n        closeDatabase = function() {\n          return openDatabase().then(function() {\n            db.close();\n            db = null;\n            return dbPromise = null;\n          });\n        };\n        validateStoreNames = function(storeNames) {\n          var found, storeName, _i, _len;\n          found = true;\n          for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n            storeName = storeNames[_i];\n            found = found & db.objectStoreNames.contains(storeName);\n          }\n          return found;\n        };\n        openTransaction = function(storeNames, mode) {\n          if (mode == null) {\n            mode = dbMode.readonly;\n          }\n          return openDatabase().then(function() {\n            if (!validateStoreNames(storeNames)) {\n              return $q.reject(\"Object stores \" + storeNames + \" do not exist.\");\n            }\n            return new Transaction(storeNames, mode);\n          });\n        };\n        keyRangeForOptions = function(options) {\n          if (options.beginKey && options.endKey) {\n            return IDBKeyRange.bound(options.beginKey, options.endKey);\n          }\n        };\n        addTransaction = function(transaction) {\n          allTransactions.push(transaction.promise);\n          return transaction.promise[\"finally\"](function() {\n            var index;\n            index = allTransactions.indexOf(transaction.promise);\n            if (index > -1) {\n              return allTransactions.splice(index, 1);\n            }\n          });\n        };\n        Transaction = (function() {\n          function Transaction(storeNames, mode) {\n            if (mode == null) {\n              mode = dbMode.readonly;\n            }\n            this.transaction = db.transaction(storeNames, mode);\n            this.defer = $q.defer();\n            this.promise = this.defer.promise;\n            this.setupCallbacks();\n          }\n\n          Transaction.prototype.setupCallbacks = function() {\n            this.transaction.oncomplete = (function(_this) {\n              return function() {\n                return $rootScope.$apply(function() {\n                  return _this.defer.resolve(\"Transaction Completed\");\n                });\n              };\n            })(this);\n            this.transaction.onabort = (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.defer.reject(\"Transaction Aborted\", error);\n                });\n              };\n            })(this);\n            this.transaction.onerror = (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.defer.reject(\"Transaction Error\", error);\n                });\n              };\n            })(this);\n            return addTransaction(this);\n          };\n\n          Transaction.prototype.objectStore = function(storeName) {\n            return this.transaction.objectStore(storeName);\n          };\n\n          Transaction.prototype.abort = function() {\n            return this.transaction.abort();\n          };\n\n          return Transaction;\n\n        })();\n        DbQ = (function() {\n          function DbQ() {\n            this.q = $q.defer();\n            this.promise = this.q.promise;\n          }\n\n          DbQ.prototype.reject = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).reject.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.rejectWith = function(req) {\n            return req.onerror = req.onblocked = (function(_this) {\n              return function(e) {\n                return _this.reject(errorMessageFor(e));\n              };\n            })(this);\n          };\n\n          DbQ.prototype.resolve = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).resolve.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.notify = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).notify.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.dbErrorFunction = function() {\n            return (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.q.reject(errorMessageFor(error));\n                });\n              };\n            })(this);\n          };\n\n          DbQ.prototype.resolveWith = function(req) {\n            this.rejectWith(req);\n            return req.onsuccess = (function(_this) {\n              return function(e) {\n                return _this.resolve(e.target.result);\n              };\n            })(this);\n          };\n\n          return DbQ;\n\n        })();\n        ObjectStore = (function() {\n          function ObjectStore(storeName, transaction) {\n            this.storeName = storeName;\n            this.store = transaction.objectStore(storeName);\n            this.transaction = transaction;\n          }\n\n          ObjectStore.prototype.defer = function() {\n            return new DbQ();\n          };\n\n          ObjectStore.prototype._mapCursor = function(defer, mapFunc, req) {\n            var results;\n            if (req == null) {\n              req = this.store.openCursor();\n            }\n            results = [];\n            defer.rejectWith(req);\n            return req.onsuccess = function(e) {\n              var cursor;\n              if (cursor = e.target.result) {\n                results.push(mapFunc(cursor));\n                defer.notify(mapFunc(cursor));\n                return cursor[\"continue\"]();\n              } else {\n                return defer.resolve(results);\n              }\n            };\n          };\n\n          ObjectStore.prototype._arrayOperation = function(data, mapFunc) {\n            var defer, item, req, results, _i, _len;\n            defer = this.defer();\n            if (!angular.isArray(data)) {\n              data = [data];\n            }\n            for (_i = 0, _len = data.length; _i < _len; _i++) {\n              item = data[_i];\n              req = mapFunc(item);\n              results = [];\n              defer.rejectWith(req);\n              req.onsuccess = function(e) {\n                results.push(e.target.result);\n                defer.notify(e.target.result);\n                if (results.length >= data.length) {\n                  return defer.resolve(results);\n                }\n              };\n            }\n            if (data.length === 0) {\n              return $q.when([]);\n            }\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.getAllKeys\n            @function\n          \n            @description\n            gets all the keys\n          \n            @returns {Q} A promise which will result with all the keys\n           */\n\n          ObjectStore.prototype.getAllKeys = function() {\n            var defer, req;\n            defer = this.defer();\n            if (this.store.getAllKeys) {\n              req = this.store.getAllKeys();\n              defer.resolveWith(req);\n            } else {\n              this._mapCursor(defer, function(cursor) {\n                return cursor.key;\n              });\n            }\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.clear\n            @function\n          \n            @description\n            clears all objects from this store\n          \n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.clear = function() {\n            var defer, req;\n            defer = this.defer();\n            req = this.store.clear();\n            defer.resolveWith(req);\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.delete\n            @function\n          \n            @description\n            Deletes the item at the key.  The operation is ignored if the item does not exist.\n          \n            @param {key} The key of the object to delete.\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype[\"delete\"] = function(key) {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store[\"delete\"](key));\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.upsert\n            @function\n          \n            @description\n            Updates the given item\n          \n            @param {data} Details of the item or items to update or insert\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.upsert = function(data) {\n            return this._arrayOperation(data, (function(_this) {\n              return function(item) {\n                return _this.store.put(item);\n              };\n            })(this));\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.insert\n            @function\n          \n            @description\n            Updates the given item\n          \n            @param {data} Details of the item or items to insert\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.insert = function(data) {\n            return this._arrayOperation(data, (function(_this) {\n              return function(item) {\n                return _this.store.add(item);\n              };\n            })(this));\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.getAll\n            @function\n          \n            @description\n            Fetches all items from the store\n          \n            @returns {Q} A promise which resolves with copies of all items in the store\n           */\n\n          ObjectStore.prototype.getAll = function() {\n            var defer;\n            defer = this.defer();\n            if (this.store.getAll) {\n              defer.resolveWith(this.store.getAll());\n            } else {\n              this._mapCursor(defer, function(cursor) {\n                return cursor.value;\n              });\n            }\n            return defer.promise;\n          };\n\n          ObjectStore.prototype.eachWhere = function(query) {\n            var defer, direction, indexName, keyRange, req;\n            defer = this.defer();\n            indexName = query.indexName;\n            keyRange = query.keyRange;\n            direction = query.direction;\n            req = indexName ? this.store.index(indexName).openCursor(keyRange, direction) : this.store.openCursor(keyRange, direction);\n            this._mapCursor(defer, (function(cursor) {\n              return cursor.value;\n            }), req);\n            return defer.promise;\n          };\n\n          ObjectStore.prototype.findWhere = function(query) {\n            return this.eachWhere(query);\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.each\n            @function\n          \n            @description\n            Iterates through the items in the store\n          \n            @param {options.beginKey} the key to start iterating from\n            @param {options.endKey} the key to stop iterating at\n            @param {options.direction} Direction to iterate in\n            @returns {Q} A promise which notifies with each individual item and resolves with all of them.\n           */\n\n          ObjectStore.prototype.each = function(options) {\n            if (options == null) {\n              options = {};\n            }\n            return this.eachBy(void 0, options);\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.eachBy\n            @function\n          \n            @description\n            Iterates through the items in the store using an index\n          \n            @param {indexName} name of the index to use instead of the primary\n            @param {options.beginKey} the key to start iterating from\n            @param {options.endKey} the key to stop iterating at\n            @param {options.direction} Direction to iterate in\n            @returns {Q} A promise which notifies with each individual item and resolves with all of them.\n           */\n\n          ObjectStore.prototype.eachBy = function(indexName, options) {\n            var q;\n            if (indexName == null) {\n              indexName = void 0;\n            }\n            if (options == null) {\n              options = {};\n            }\n            q = new Query();\n            q.indexName = indexName;\n            q.keyRange = keyRangeForOptions(options);\n            q.direction = options.direction || defaultQueryOptions.direction;\n            return this.eachWhere(q);\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.count\n            @function\n          \n            @description\n            Returns a count of the items in the store\n          \n            @returns {Q} A promise which resolves with the count of all the items in the store.\n           */\n\n          ObjectStore.prototype.count = function() {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store.count());\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.find\n            @function\n          \n            @description\n            Fetches an item from the store\n          \n            @returns {Q} A promise which resolves with the item from the store\n           */\n\n          ObjectStore.prototype.find = function(key) {\n            var defer, req;\n            defer = this.defer();\n            req = this.store.get(key);\n            defer.rejectWith(req);\n            req.onsuccess = (function(_this) {\n              return function(e) {\n                if (e.target.result) {\n                  return defer.resolve(e.target.result);\n                } else {\n                  return defer.reject(\"\" + _this.storeName + \":\" + key + \" not found.\");\n                }\n              };\n            })(this);\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.findBy\n            @function\n          \n            @description\n            Fetches an item from the store using a named index.\n          \n            @returns {Q} A promise which resolves with the item from the store.\n           */\n\n          ObjectStore.prototype.findBy = function(index, key) {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store.index(index).get(key));\n            return defer.promise;\n          };\n\n          ObjectStore.prototype.query = function() {\n            return new Query();\n          };\n\n          return ObjectStore;\n\n        })();\n        Query = (function() {\n          function Query() {\n            this.indexName = void 0;\n            this.keyRange = void 0;\n            this.direction = cursorDirection.next;\n          }\n\n          Query.prototype.$lt = function(value) {\n            this.keyRange = IDBKeyRange.upperBound(value, true);\n            return this;\n          };\n\n          Query.prototype.$gt = function(value) {\n            this.keyRange = IDBKeyRange.lowerBound(value, true);\n            return this;\n          };\n\n          Query.prototype.$lte = function(value) {\n            this.keyRange = IDBKeyRange.upperBound(value);\n            return this;\n          };\n\n          Query.prototype.$gte = function(value) {\n            this.keyRange = IDBKeyRange.lowerBound(value);\n            return this;\n          };\n\n          Query.prototype.$eq = function(value) {\n            this.keyRange = IDBKeyRange.only(value);\n            return this;\n          };\n\n          Query.prototype.$between = function(low, hi, exLow, exHi) {\n            if (exLow == null) {\n              exLow = false;\n            }\n            if (exHi == null) {\n              exHi = false;\n            }\n            this.keyRange = IDBKeyRange.bound(low, hi, exLow, exHi);\n            return this;\n          };\n\n          Query.prototype.$desc = function(unique) {\n            this.direction = unique ? cursorDirection.prevunique : cursorDirection.prev;\n            return this;\n          };\n\n          Query.prototype.$asc = function(unique) {\n            this.direction = unique ? cursorDirection.nextunique : cursorDirection.next;\n            return this;\n          };\n\n          Query.prototype.$index = function(indexName) {\n            this.indexName = indexName;\n            return this;\n          };\n\n          return Query;\n\n        })();\n        return {\n\n          /**\n          @ngdoc method\n          @name $indexedDB.objectStore\n          @function\n          \n          @description an IDBObjectStore to use\n          \n          @params {string} storeName the name of the objectstore to use\n          @returns {object} ObjectStore\n           */\n          openStore: function(storeName, callBack, mode) {\n            if (mode == null) {\n              mode = dbMode.readwrite;\n            }\n            return openTransaction([storeName], mode).then(function(transaction) {\n              var results;\n              results = callBack(new ObjectStore(storeName, transaction));\n              return appendResultsToPromise(transaction.promise, results);\n            });\n          },\n          openStores: function(storeNames, callback, mode) {\n            if (mode == null) {\n              mode = dbMode.readwrite;\n            }\n            return openTransaction(storeNames, mode).then(function(transaction) {\n              var objectStores, results, storeName;\n              objectStores = (function() {\n                var _i, _len, _results;\n                _results = [];\n                for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n                  storeName = storeNames[_i];\n                  _results.push(new ObjectStore(storeName, transaction));\n                }\n                return _results;\n              })();\n              results = callback.apply(null, objectStores);\n              return appendResultsToPromise(transaction.promise, results);\n            });\n          },\n          openAllStores: function(callback, mode) {\n            if (mode == null) {\n              mode = dbMode.readwrite;\n            }\n            return openDatabase().then((function(_this) {\n              return function() {\n                var objectStores, results, storeName, storeNames, transaction;\n                storeNames = Array.prototype.slice.apply(db.objectStoreNames);\n                transaction = new Transaction(storeNames, mode);\n                objectStores = (function() {\n                  var _i, _len, _results;\n                  _results = [];\n                  for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n                    storeName = storeNames[_i];\n                    _results.push(new ObjectStore(storeName, transaction));\n                  }\n                  return _results;\n                })();\n                results = callback.apply(null, objectStores);\n                return appendResultsToPromise(transaction.promise, results);\n              };\n            })(this));\n          },\n\n          /**\n            @ngdoc method\n            @name $indexedDB.closeDatabase\n            @function\n          \n            @description Closes the database for use and completes all transactions.\n           */\n          closeDatabase: function() {\n            return closeDatabase();\n          },\n\n          /**\n            @ngdoc method\n            @name $indexedDB.deleteDatabase\n            @function\n          \n            @description Closes and then destroys the current database.  Returns a promise that resolves when this is persisted.\n           */\n          deleteDatabase: function() {\n            return closeDatabase().then(function() {\n              var defer;\n              defer = new DbQ();\n              defer.resolveWith(indexedDB.deleteDatabase(dbName));\n              return defer.promise;\n            })[\"finally\"](function() {\n              return $log.log(\"$indexedDB: \" + dbName + \" database deleted.\");\n            });\n          },\n          queryDirection: apiDirection,\n          flush: function() {\n            if (allTransactions.length > 0) {\n              return $q.all(allTransactions);\n            } else {\n              return $q.when([]);\n            }\n          },\n\n          /**\n            @ngdoc method\n            @name $indexedDB.databaseInfo\n            @function\n          \n            @description Returns information about this database.\n           */\n          databaseInfo: function() {\n            return openDatabase().then(function() {\n              var storeNames, transaction;\n              transaction = null;\n              storeNames = Array.prototype.slice.apply(db.objectStoreNames);\n              return openTransaction(storeNames, dbMode.readonly).then(function(transaction) {\n                var store, storeName, stores;\n                stores = (function() {\n                  var _i, _len, _results;\n                  _results = [];\n                  for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n                    storeName = storeNames[_i];\n                    store = transaction.objectStore(storeName);\n                    _results.push({\n                      name: storeName,\n                      keyPath: store.keyPath,\n                      autoIncrement: store.autoIncrement,\n                      indices: Array.prototype.slice.apply(store.indexNames)\n                    });\n                  }\n                  return _results;\n                })();\n                return transaction.promise.then(function() {\n                  return {\n                    name: db.name,\n                    version: db.version,\n                    objectStores: stores\n                  };\n                });\n              });\n            });\n          }\n        };\n      }\n    ];\n  });\n\n}).call(this);\n\n//# sourceMappingURL=angular-indexed-db.js.map\n"]}